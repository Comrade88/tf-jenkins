---

- job-template:
    name: deploy-platform-{project}
    description: "devstack deploy platform for {project}"
    defaults: global
    parameters:
      - label:
          name: SLAVE
      - string:
          name: PIPELINE_BUILD_NUMBER
    properties:
      - build-discarder:
          num-to-keep: 10
    wrappers:
      - timestamps
      - credentials-binding:
          - ssh-user-private-key:
              credential-id: worker
              key-file-variable: WORKER_SSH_KEY
              username-variable: WORKER_USER_NAME
              passphrase-variable: WORKER_PASSPHRASE
      - credentials-binding:
          - amazon-web-services:
              credential-id: aws-creds
              access-key: AWS_ACCESS_KEY_ID
              secret-key: AWS_SECRET_ACCESS_KEY
      - credentials-binding:
          - ssh-user-private-key:
              credential-id: logs_host
              key-file-variable: LOGS_HOST_SSH_KEY
              username-variable: LOGS_HOST_USERNAME
      - credentials-binding:
          - text:
              credential-id: VEXX_OS_USERNAME
              variable: OS_USERNAME
          - text:
              credential-id: VEXX_OS_PROJECT_NAME
              variable: OS_PROJECT_NAME
          - text:
              credential-id: VEXX_OS_PASSWORD
              variable: OS_PASSWORD
          - text:
              credential-id: VEXX_OS_DOMAIN_NAME
              variable: OS_USER_DOMAIN_NAME
          - text:
              credential-id: VEXX_OS_DOMAIN_NAME
              variable: OS_PROJECT_DOMAIN_NAME
          - text:
              credential-id: VEXX_OS_AUTH_URL
              variable: OS_AUTH_URL
    scm:
      - tf-jenkins
      - tf-devstack
    builders:
      - copyartifact:
          project: check-pipeline
          filter: "global.env"
          which-build: specific-build
          build-number: ${{PIPELINE_BUILD_NUMBER}}
      - shell: |
          export DEBUG=true
          export ENVIRONMENT_OS={environment_os}
          export ORCHESTRATOR={orchestrator}
          source "$WORKSPACE/global.env"
          ./src/progmaticlab/tf-jenkins/jobs/devstack/{deployer}/create_workers.sh
      - shell: |
          export DEBUG=true
          export ORCHESTRATOR={orchestrator}
          source "$WORKSPACE/global.env"
          res=0
          ./src/progmaticlab/tf-jenkins/jobs/devstack/{deployer}/deploy_platform.sh || res=1
          if [[ $res == 1 ]]; then
            export JOB_LOGS_PATH={project}-${BUILD_ID}
            ./src/progmaticlab/tf-jenkins/jobs/devstack/{deployer}/collect_logs.sh || /bin/true
          fi
          exit $res
    publishers:
      - archive:
          artifacts: '*.env'

- job-template:
    name: deploy-tf-{project}
    description: "devstack deploy TF for {project}"
    defaults: global
    parameters:
      - label:
          name: SLAVE
      - string:
          name: DEPLOY_PLATFORM_JOB_NUMBER
      - string:
          name: PIPELINE_BUILD_NUMBER
    properties:
      - build-discarder:
          num-to-keep: 10
    wrappers:
      - timestamps
      - credentials-binding:
          - ssh-user-private-key:
              credential-id: worker
              key-file-variable: WORKER_SSH_KEY
              username-variable: WORKER_USER_NAME
              passphrase-variable: WORKER_PASSPHRASE
    scm:
      - tf-jenkins
      - tf-devstack
    builders:
      - copyartifact:
          project: deploy-platform-{project}
          filter: "*.env"
          which-build: specific-build
          build-number: ${{DEPLOY_PLATFORM_JOB_NUMBER}}
      - copyartifact:
          project: check-pipeline
          filter: "global.env"
          which-build: specific-build
          build-number: ${{PIPELINE_BUILD_NUMBER}}
      - shell: |
          export DEBUG=true
          source "$WORKSPACE/global.env"
          source "$WORKSPACE/stackrc.deploy-platform-{project}.env"
          ./src/progmaticlab/tf-jenkins/jobs/devstack/{deployer}/deploy_tf.sh  
    publishers:
      - archive:
          artifacts: '*.env'

- project:
    name: deploy
    project:
      - k8s_manifests:
          environment_os: centos7
          deployer: k8s_manifests
          orchestrator: kubernetes
      - k8s_helm:
          environment_os: centos7
          deployer: helm
          orchestrator: kubernetes
      - os_helm:
          environment_os: centos7
          deployer: helm
          orchestrator: openstack
      - k8s_juju:
          environment_os: ubuntu18
          deployer: juju
          orchestrator: kubernetes
      - os_juju:
          environment_os: ubuntu18
          deployer: juju
          orchestrator: openstack
      - os_ansible:
          environment_os: centos7
          deployer: ansible
          orchestrator: openstack
    jobs:
      - 'deploy-platform-{project}'
      - 'deploy-tf-{project}'
