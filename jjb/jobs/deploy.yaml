---

- job-template:
    name: deploy-platform-{project}
    description: "devstack deploy platform for {project}"
    defaults: global
    parameters:
      - label:
          name: NODE_NAME
      - string:
          name: RANDOM
      - string:
          name: PIPELINE_NAME
      - string:
          name: PIPELINE_NUMBER
    properties:
      - build-discarder:
          num-to-keep: 10
    wrappers:
      - timestamps
      - credentials-binding:
          - ssh-user-private-key:
              credential-id: worker
              key-file-variable: WORKER_SSH_KEY
              username-variable: WORKER_USER_NAME
              passphrase-variable: WORKER_PASSPHRASE
      - credentials-binding:
          - amazon-web-services:
              credential-id: aws-creds
              access-key: AWS_ACCESS_KEY_ID
              secret-key: AWS_SECRET_ACCESS_KEY
      - credentials-binding:
          - ssh-user-private-key:
              credential-id: logs_host
              key-file-variable: LOGS_HOST_SSH_KEY
              username-variable: LOGS_HOST_USERNAME
      - credentials-binding:
          - text:
              credential-id: VEXX_OS_USERNAME
              variable: OS_USERNAME
          - text:
              credential-id: VEXX_OS_PROJECT_NAME
              variable: OS_PROJECT_NAME
          - text:
              credential-id: VEXX_OS_PASSWORD
              variable: OS_PASSWORD
          - text:
              credential-id: VEXX_OS_DOMAIN_NAME
              variable: OS_USER_DOMAIN_NAME
          - text:
              credential-id: VEXX_OS_DOMAIN_NAME
              variable: OS_PROJECT_DOMAIN_NAME
          - text:
              credential-id: VEXX_OS_AUTH_URL
              variable: OS_AUTH_URL
          - text:
              credential-id: RHEL_USER
              variable: RHEL_USER
          - text:
              credential-id: RHEL_PASSWORD
              variable: RHEL_PASSWORD
    scm:
      - tf-jenkins
      - tf-devstack
    builders:
      - copyartifact:
          project: ${{PIPELINE_NAME}}
          filter: "global.env"
          which-build: upstream-build
      - shell: |
          source "$WORKSPACE/global.env"
          desc="Pipeline: ${{PIPELINE_NAME}}-$PIPELINE_NUMBER<br>Job logs: <a href=\"${{LOGS_URL}}/{project}\">${{LOGS_URL}}/{project}</a>"
          echo "DESCRIPTION $desc"
      - description-setter:
          regexp: "DESCRIPTION (.*)"
      - shell: |
          export DEBUG=true
          export ENVIRONMENT_OS={environment_os}
          export ORCHESTRATOR={orchestrator}
          source "$WORKSPACE/global.env"
          ./src/progmaticlab/tf-jenkins/jobs/devstack/{deployer}/create_workers.sh
          # add more information about current deployment
          ENV_FILE="$WORKSPACE/stackrc.$JOB_NAME.env"
          echo "export ORCHESTRATOR=$ORCHESTRATOR" >> "$ENV_FILE"
          echo "export DEPLOYER={deployer}" >> "$ENV_FILE"
          echo "export JOB_LOGS_PATH={project}" >> "$ENV_FILE"
      - shell: |
          set +e
          set -o pipefail
          export DEBUG=true
          export ORCHESTRATOR={orchestrator}
          source "$WORKSPACE/global.env"
          source "$WORKSPACE/stackrc.$JOB_NAME.env"
          source ./src/progmaticlab/tf-jenkins/infra/${{SLAVE}}/definitions

          export FULL_LOGS_PATH="$LOGS_PATH/$JOB_LOGS_PATH"
          ssh -i $LOGS_HOST_SSH_KEY $SSH_OPTIONS $LOGS_HOST_USERNAME@$LOGS_HOST "mkdir -p $FULL_LOGS_PATH"

          ./src/progmaticlab/tf-jenkins/jobs/devstack/{deployer}/deploy_platform.sh |& tee $WORKSPACE/output-deploy-platform.log  || res=1
          rsync -a -e "ssh -i $LOGS_HOST_SSH_KEY $SSH_OPTIONS" $WORKSPACE/output-deploy-platform.log $LOGS_HOST_USERNAME@$LOGS_HOST:$FULL_LOGS_PATH
          if [[ $res == 1 ]]; then
            export DEBUG=false
            ./src/progmaticlab/tf-jenkins/jobs/devstack/{deployer}/collect_logs.sh || /bin/true
          fi
          exit $res
    publishers:
      - archive:
          artifacts: '*.env'
      - postbuildscript:
          builders:
            - role: SLAVE
              build-on:
                  - FAILURE
              build-steps:
                  - shell: |
                      export ORCHESTRATOR={orchestrator}
                      source "$WORKSPACE/global.env"
                      source "$WORKSPACE/stackrc.$JOB_NAME.env"
                      source ./src/progmaticlab/tf-jenkins/infra/${{SLAVE}}/definitions
                      ./src/progmaticlab/tf-jenkins/jobs/devstack/{deployer}/remove_workers.sh

- job-template:
    name: deploy-tf-{project}
    description: "devstack deploy TF for {project}"
    defaults: global
    parameters:
      - label:
          name: NODE_NAME
      - string:
          name: RANDOM
      - string:
          name: PIPELINE_NAME
      - string:
          name: PIPELINE_NUMBER
      - string:
          name: DEPLOY_PLATFORM_JOB_NUMBER
    properties:
      - build-discarder:
          num-to-keep: 10
    wrappers:
      - timestamps
      - credentials-binding:
          - ssh-user-private-key:
              credential-id: worker
              key-file-variable: WORKER_SSH_KEY
              username-variable: WORKER_USER_NAME
              passphrase-variable: WORKER_PASSPHRASE
      - credentials-binding:
          - ssh-user-private-key:
              credential-id: logs_host
              key-file-variable: LOGS_HOST_SSH_KEY
              username-variable: LOGS_HOST_USERNAME
    scm:
      - tf-jenkins
      - tf-devstack
    builders:
      - copyartifact:
          project: ${{PIPELINE_NAME}}
          filter: "global.env"
          which-build: upstream-build
      - copyartifact:
          project: deploy-platform-{project}
          filter: "*.env"
          which-build: specific-build
          build-number: ${{DEPLOY_PLATFORM_JOB_NUMBER}}
      - shell: |
          source "$WORKSPACE/global.env"
          desc="Pipeline: ${{PIPELINE_NAME}}-$PIPELINE_NUMBER<br>Job logs: <a href=\"${{LOGS_URL}}/{project}\">${{LOGS_URL}}/{project}</a>"
          echo "DESCRIPTION $desc"
      - description-setter:
          regexp: "DESCRIPTION (.*)"
      - shell: |
          set +e
          set -o pipefail
          export DEBUG=true
          source "$WORKSPACE/global.env"
          source "$WORKSPACE/stackrc.deploy-platform-{project}.env"
          source ./src/progmaticlab/tf-jenkins/infra/${{SLAVE}}/definitions

          export FULL_LOGS_PATH="$LOGS_PATH/$JOB_LOGS_PATH"
          ./src/progmaticlab/tf-jenkins/jobs/devstack/{deployer}/deploy_tf.sh |& tee $WORKSPACE/output-deploy-tf.log || res=1
          rsync -a -e "ssh -i $LOGS_HOST_SSH_KEY $SSH_OPTIONS" $WORKSPACE/output-deploy-tf.log $LOGS_HOST_USERNAME@$LOGS_HOST:$FULL_LOGS_PATH
          exit $res
    publishers:
      - archive:
          artifacts: '*.env'

- job:
    name: collect-logs-and-cleanup
    description: "collect all logs for {project}"
    defaults: global
    parameters:
      - label:
          name: NODE_NAME
      - string:
          name: RANDOM
      - string:
          name: PIPELINE_NAME
      - string:
          name: PIPELINE_NUMBER
      - string:
          name: DEPLOY_PLATFORM_JOB_NAME
      - string:
          name: DEPLOY_PLATFORM_JOB_NUMBER
      - bool:
          name: COLLECT_SANITY_LOGS
    properties:
      - build-discarder:
          num-to-keep: 50
    wrappers:
      - timestamps
      - credentials-binding:
          - ssh-user-private-key:
              credential-id: worker
              key-file-variable: WORKER_SSH_KEY
              username-variable: WORKER_USER_NAME
              passphrase-variable: WORKER_PASSPHRASE
      - credentials-binding:
          - amazon-web-services:
              credential-id: aws-creds
              access-key: AWS_ACCESS_KEY_ID
              secret-key: AWS_SECRET_ACCESS_KEY
      - credentials-binding:
          - ssh-user-private-key:
              credential-id: logs_host
              key-file-variable: LOGS_HOST_SSH_KEY
              username-variable: LOGS_HOST_USERNAME
      - credentials-binding:
          - text:
              credential-id: VEXX_OS_USERNAME
              variable: OS_USERNAME
          - text:
              credential-id: VEXX_OS_PROJECT_NAME
              variable: OS_PROJECT_NAME
          - text:
              credential-id: VEXX_OS_PASSWORD
              variable: OS_PASSWORD
          - text:
              credential-id: VEXX_OS_DOMAIN_NAME
              variable: OS_USER_DOMAIN_NAME
          - text:
              credential-id: VEXX_OS_DOMAIN_NAME
              variable: OS_PROJECT_DOMAIN_NAME
          - text:
              credential-id: VEXX_OS_AUTH_URL
              variable: OS_AUTH_URL
    scm:
      - tf-jenkins
      - tf-devstack
    builders:
      - copyartifact:
          project: ${PIPELINE_NAME}
          filter: "global.env"
          which-build: upstream-build
      - copyartifact:
          project: ${DEPLOY_PLATFORM_JOB_NAME}
          filter: "*.env"
          which-build: specific-build
          build-number: ${DEPLOY_PLATFORM_JOB_NUMBER}
      - shell: |
          desc="Pipeline: ${PIPELINE_NAME}-${PIPELINE_NUMBER}, Launched by: ${DEPLOY_PLATFORM_JOB_NAME}-${DEPLOY_PLATFORM_JOB_NUMBER}"
          echo "DESCRIPTION $desc"
      - description-setter:
          regexp: "DESCRIPTION (.*)"
      - shell: |
          set +e
          set -o allexport
          source "$WORKSPACE/global.env"
          export ENV_FILE="$WORKSPACE/stackrc.${DEPLOY_PLATFORM_JOB_NAME}.env"
          source "$ENV_FILE"
          export FULL_LOGS_PATH="${LOGS_PATH}/${JOB_LOGS_PATH}"
          "$WORKSPACE/src/progmaticlab/tf-jenkins/jobs/devstack/${DEPLOYER}/collect_logs.sh"
          if [[ "${COLLECT_SANITY_LOGS,,}" == 'true' ]]; then
            "$WORKSPACE/src/progmaticlab/tf-jenkins/jobs/test/sanity/collect_logs.sh"
          fi
          "$WORKSPACE/src/progmaticlab/tf-jenkins/jobs/devstack/${DEPLOYER}/remove_workers.sh"

- project:
    name: deploy
    project:
      - k8s_manifests:
          environment_os: centos7
          deployer: k8s_manifests
          orchestrator: kubernetes
      - helm_k8s:
          environment_os: centos7
          deployer: helm
          orchestrator: kubernetes
      - helm_os:
          environment_os: centos7
          deployer: helm
          orchestrator: openstack
      - juju_k8s:
          environment_os: ubuntu18
          deployer: juju
          orchestrator: kubernetes
      - juju_os:
          environment_os: ubuntu18
          deployer: juju
          orchestrator: openstack
      - ansible_k8s:
          environment_os: centos7
          deployer: ansible
          orchestrator: kubernetes
      - ansible_os:
          environment_os: centos7
          deployer: ansible
          orchestrator: openstack
      - rhosp:
          environment_os: rhel7
          deployer: rhosp
          orchestrator: openstack
    jobs:
      - 'deploy-platform-{project}'
      - 'deploy-tf-{project}'
