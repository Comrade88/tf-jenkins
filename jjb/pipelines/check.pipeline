pipeline {
    agent {
        label 'aws'
    }
    environment {
        SLAVE = "vexx"
        PATCHSET_ID = "12345/1"
        CONTAINER_REGISTRY = "pnexus.sytes.net:5001"
    }
    stages {
        stage('Fetch') {
            steps{
                script{
                    job_fetch = build job: 'devstack-fetch',
                        parameters: [string(name: 'PATCHSET_ID', value: PATCHSET_ID)]
                    job_fetch_id = "$job_fetch.buildVariables.BUILD_ID"
                }
                copyArtifacts filter: '*',
                        projectName: 'devstack-fetch',
                        selector: specific( job_fetch_id )
            }
        }
        stage('Check'){
            parallel {
                stage('Unit-test'){
                    steps{
                        catchError(buildResult: 'FAILURE', stageResult: 'FAILURE'){
                            build job: 'devstack-unit-test',
                                parameters: [
                                    string(name: 'PATCHSET_ID', value: PATCHSET_ID)
                                ]
                            }
                        }
                    }
                stage('Lint'){
                    steps{
                        catchError(buildResult: 'FAILURE', stageResult: 'FAILURE'){
                            build job: 'devstack-lint',
                                parameters: [string(name: 'PATCHSET_ID', value: PATCHSET_ID)]
                        }
                    }
                }
                stage('Deploy k8s for manifests'){
                    steps{
                        catchError(buildResult: 'FAILURE', stageResult: 'FAILURE'){
                            script{
                                job_fetch = build job: 'devstack-deploy-k8s_manifests-aws',
                                    parameters: [string(name: 'PATCHSET_ID', value: PATCHSET_ID)]
                                job_fetch_id = "$job_fetch.buildVariables.BUILD_ID"
                            }
                            copyArtifacts filter: '*',
                                    projectName: 'devstack-deploy-k8s_manifests-aws',
                                    selector: specific( job_fetch_id )
                        }
                    }
                }
                stage('Deploy k8s for helm'){
                    steps{
                        catchError(buildResult: 'FAILURE', stageResult: 'FAILURE'){
                            script{
                                job_fetch = build job: 'devstack-deploy-k8s_helm-aws',
                                    parameters: [string(name: 'PATCHSET_ID', value: PATCHSET_ID)]
                                job_fetch_id = "$job_fetch.buildVariables.BUILD_ID"
                            }
                        }
                        copyArtifacts filter: '*',
                                projectName: 'devstack-deploy-k8s_helm-aws',
                                selector: specific( job_fetch_id )
                    }
                }
                stage('Deploy k8s for juju'){
                    steps{
                        catchError(buildResult: 'FAILURE', stageResult: 'FAILURE'){
                            script{
                                job_fetch = build job: 'devstack-deploy-k8s_juju-aws',
                                    parameters: [string(name: 'PATCHSET_ID', value: PATCHSET_ID)]
                                job_fetch_id = "$job_fetch.buildVariables.BUILD_ID"
                            }
                        }
                        copyArtifacts filter: '*',
                                projectName: 'devstack-deploy-k8s_juju-aws',
                                selector: specific( job_fetch_id )
                    }
                }
                stage('Deploy openstack for helm'){
                    steps{
                        catchError(buildResult: 'FAILURE', stageResult: 'FAILURE'){
                            script{
                                job_fetch = build job: 'devstack-deploy-os_helm-aws',
                                    parameters: [string(name: 'PATCHSET_ID', value: PATCHSET_ID)]
                                job_fetch_id = "$job_fetch.buildVariables.BUILD_ID"
                            }
                        }
                        copyArtifacts filter: '*',
                                projectName: 'devstack-deploy-os_helm-aws',
                                selector: specific( job_fetch_id )
                    }
                }
                stage('Build-test'){
                    stages{
                        stage('Build'){
                            steps{
                                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE'){
                                    build job: 'devstack-build',
                                        parameters: [
                                            string(name: 'SLAVE', value: SLAVE),
                                            string(name: 'PATCHSET_ID', value: PATCHSET_ID)
                                        ]
                                }
                            }
                        }
                        stage('Deploy TF'){
                            steps{
                                script{
                                    int ERRORS = 0
                                    parallel(
                                        "Deploy-test k8s for manifests":{
                                            try {
                                                build job: 'devstack-deploy_test-k8s_manifests-aws',
                                                    parameters: [string(name: 'PATCHSET_ID', value: PATCHSET_ID)]
                                            } catch (err) {
                                                ++ERRORS
                                            }
                                            parallel(
                                                "Test sanity k8s for manifests":{
                                                build job: 'devstack-test_sanity-k8s_manifests-aws',
                                                    parameters: [string(name: 'PATCHSET_ID', value: PATCHSET_ID)]
                                                },
                                                "Test smoke k8s for manifests":{
                                                build job: 'devstack-test_smoke-k8s_manifests-aws',
                                                    parameters: [string(name: 'PATCHSET_ID', value: PATCHSET_ID)]
                                                }
                                            )
                                        },
                                        "Deploy-test k8s for helm":{
                                            try {
                                            build job: 'devstack-deploy_test-k8s_helm-aws',
                                                parameters: [string(name: 'PATCHSET_ID', value: PATCHSET_ID)]
                                            } catch (err) {
                                                ++ERRORS
                                            }
                                            parallel(
                                                "Test sanity k8s for manifests":{
                                                build job: 'devstack-test_sanity-k8s_helm-aws',
                                                    parameters: [string(name: 'PATCHSET_ID', value: PATCHSET_ID)]
                                                },
                                                "Test smoke k8s for manifests":{
                                                build job: 'devstack-test_smoke-k8s_helm-aws',
                                                    parameters: [string(name: 'PATCHSET_ID', value: PATCHSET_ID)]
                                                }
                                            )
                                        },
                                        "Deploy-test k8s for juju":{
                                            try {
                                                build job: 'devstack-deploy_test-k8s_juju-aws',
                                                    parameters: [string(name: 'PATCHSET_ID', value: PATCHSET_ID)]
                                            } catch (err) {
                                                ++ERRORS
                                            }
                                            parallel(
                                                "Test sanity k8s for juju":{
                                                build job: 'devstack-test_sanity-k8s_juju-aws',
                                                    parameters: [string(name: 'PATCHSET_ID', value: PATCHSET_ID)]
                                                },
                                                "Test smoke k8s for manifests":{
                                                build job: 'devstack-test_smoke-k8s_juju-aws',
                                                    parameters: [string(name: 'PATCHSET_ID', value: PATCHSET_ID)]
                                                }
                                            )
                                        },
                                        "Deploy-test openstack for helm":{
                                            try {
                                                build job: 'devstack-deploy_test-os_helm-aws',
                                                    parameters: [string(name: 'PATCHSET_ID', value: PATCHSET_ID)]
                                            } catch (err) {
                                                ++ERRORS
                                            }
                                            parallel(
                                                "Test sanity openstack for helm":{
                                                build job: 'devstack-test_sanity-os_helm-aws',
                                                    parameters: [string(name: 'PATCHSET_ID', value: PATCHSET_ID)]
                                                },
                                                "Test smoke openstack for helm":{
                                                build job: 'devstack-test_smoke-os_helm-aws',
                                                    parameters: [string(name: 'PATCHSET_ID', value: PATCHSET_ID)]
                                                }
                                            )
                                        }
                                    )
                                    if ( ERRORS > 0 ) {
                                        currentBuild.result = 'FAILED'
                                        sh "exit 1"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            sh "echo 'Destroy VMs'"
        }
        failure {
            sh "echo 'archiveArtifacts'"
            sh "echo 'gerrit vote'"
        }
        success {
            sh "echo 'gerrit vote'"
            sh "echo publishArtifact"
        }
        cleanup {
            sh "echo 'remove trash'"
            //deleteDir()
        }
    }
}
