pipeline {
    agent {
        label 'aws'
    }
    environment {
        SLAVE = "aws"
        PATCHSET_ID = "12345/1"
        CONTAINER_REGISTRY = "pnexus.sytes.net:5001"
    }
    stages {
        stage('Fetch') {
            steps {
                script {
                    build 'fetch-sources'
                }
            }
        }
        stage('Check'){
            parallel {
                stage('Unit-test'){
                    steps{
                        catchError(buildResult: 'FAILURE', stageResult: 'FAILURE'){
                            build job: 'test-unit',
                                parameters: [
                                    [$class: 'LabelParameterValue', name: 'SLAVE', label: "${SLAVE}"]
                                ]
                            }
                        }
                    }
                stage('Lint'){
                    steps{
                        catchError(buildResult: 'FAILURE', stageResult: 'FAILURE'){
                            build job: 'test-lint',
                                parameters: [
                                    [$class: 'LabelParameterValue', name: 'SLAVE', label: "${SLAVE}"]
                                ]
                        }
                    }
                }
                stage('Deploy k8s for manifests'){
                    steps{
                        catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                            script {
                                job = build job: 'deploy-platform-k8s_manifests',
                                    parameters: [
                                        [$class: 'LabelParameterValue', name: 'SLAVE', label: "${SLAVE}"]
                                    ]
                                env.JOB_NUMBER_DEPLOY_PLATFORM_K8S_MANIFESTS = "$job.buildVariables.BUILD_NUMBER"
                            }
                        }
                    }
                }
                stage('Deploy k8s for helm'){
                    steps{
                        catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                            script {
                                job = build job: 'deploy-platform-k8s_helm',
                                    parameters: [
                                        [$class: 'LabelParameterValue', name: 'SLAVE', label: "${SLAVE}"]
                                    ]
                                env.JOB_NUMBER_DEPLOY_PLATFORM_K8S_HELM = "$job.buildVariables.BUILD_NUMBER"
                            }
                        }
                    }
                }
                stage('Deploy k8s for juju'){
                    steps{
                        catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                            script {
                                job = build job: 'deploy-platform-k8s_juju',
                                    parameters: [
                                        [$class: 'LabelParameterValue', name: 'SLAVE', label: "${SLAVE}"]
                                    ]
                                env.JOB_NUMBER_DEPLOY_PLATFORM_K8S_JUJU = "$job.buildVariables.BUILD_NUMBER"
                            }
                        }
                    }
                }
                stage('Deploy openstack for helm'){
                    steps{
                        catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                            script {
                                job = build job: 'deploy-platform-os_helm',
                                    parameters: [
                                        [$class: 'LabelParameterValue', name: 'SLAVE', label: "${SLAVE}"]
                                    ]
                                env.JOB_NUMBER_DEPLOY_PLATFORM_OS_HELM = "$job.buildVariables.BUILD_NUMBER"
                            }
                        }
                    }
                }
                stage('Build-test'){
                    stages{
                        stage('Build'){
                            steps{
                                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE'){
                                    build job: 'build',
                                        parameters: [
                                            [$class: 'LabelParameterValue', name: 'SLAVE', label: "${SLAVE}"]
                                        ]
                                }
                            }
                        }
                        stage('Deploy TF') {
                            steps{
                                script {
                                    int ERRORS = 0
                                    parallel(
                                        "Deploy-test k8s for manifests": {
                                            if (env.JOB_NUMBER_DEPLOY_PLATFORM_K8S_MANIFESTS) {
                                                job = build job: 'deploy-tf-k8s_manifests',
                                                    parameters: [
                                                        string(name: 'DEPLOY_PLATFORM_JOB_NUMBER', value: env.JOB_NUMBER_DEPLOY_PLATFORM_K8S_MANIFESTS),
                                                        [$class: 'LabelParameterValue', name: 'SLAVE', label: "${SLAVE}"]
                                                    ]
                                                env.JOB_NUMBER_DEPLOY_TF_K8S_MANIFESTS = "$job.buildVariables.BUILD_NUMBER"
                                                parallel(
                                                    "Test sanity k8s for manifests": {
                                                        build job: 'test-sanity',
                                                            parameters: [
                                                                string(name: 'DEPLOY_TF_PROJECT', value: 'deploy-tf-k8s_manifests'),
                                                                string(name: 'DEPLOY_TF_JOB_NUMBER', value: env.JOB_NUMBER_DEPLOY_TF_K8S_MANIFESTS),
                                                                [$class: 'LabelParameterValue', name: 'SLAVE', label: "${SLAVE}"]
                                                            ]
                                                    },
                                                    "Test smoke k8s for manifests": {
                                                        build job: 'test-smoke',
                                                            parameters: [
                                                                string(name: 'DEPLOY_TF_PROJECT', value: 'deploy-tf-k8s_manifests'),
                                                                string(name: 'DEPLOY_TF_JOB_NUMBER', value: env.JOB_NUMBER_DEPLOY_TF_K8S_MANIFESTS),
                                                                [$class: 'LabelParameterValue', name: 'SLAVE', label: "${SLAVE}"]
                                                            ]
                                                    }
                                                )
                                            }
                                        },
                                        "Deploy-test k8s for helm": {
                                            if (env.JOB_NUMBER_DEPLOY_PLATFORM_K8S_HELM) {
                                                job = build job: 'deploy-tf-k8s_helm',
                                                    parameters: [
                                                        string(name: 'DEPLOY_PLATFORM_JOB_NUMBER', value: env.JOB_NUMBER_DEPLOY_PLATFORM_K8S_HELM),
                                                        [$class: 'LabelParameterValue', name: 'SLAVE', label: "${SLAVE}"]
                                                    ]
                                                env.JOB_NUMBER_DEPLOY_TF_K8S_HELM = "$job.buildVariables.BUILD_NUMBER"
                                                parallel(
                                                    "Test sanity k8s for manifests": {
                                                        build job: 'test-sanity',
                                                            parameters: [
                                                                string(name: 'DEPLOY_TF_PROJECT', value: 'deploy-tf-k8s_helm'),
                                                                string(name: 'DEPLOY_TF_JOB_NUMBER', value: env.JOB_NUMBER_DEPLOY_TF_K8S_HELM),
                                                                [$class: 'LabelParameterValue', name: 'SLAVE', label: "${SLAVE}"]
                                                            ]
                                                    },
                                                    "Test smoke k8s for manifests": {
                                                        build job: 'test-smoke',
                                                            parameters: [
                                                                string(name: 'DEPLOY_TF_PROJECT', value: 'deploy-tf-k8s_helm'),
                                                                string(name: 'DEPLOY_TF_JOB_NUMBER', value: env.JOB_NUMBER_DEPLOY_TF_K8S_HELM),
                                                                [$class: 'LabelParameterValue', name: 'SLAVE', label: "${SLAVE}"]
                                                            ]
                                                    }
                                                )
                                            }
                                        },
                                        "Deploy-test k8s for juju": {
                                            if (env.JOB_NUMBER_DEPLOY_PLATFORM_K8S_JUJU) {
                                                job = build job: 'deploy-tf-k8s_juju',
                                                    parameters: [
                                                        string(name: 'DEPLOY_PLATFORM_JOB_NUMBER', value: env.JOB_NUMBER_DEPLOY_PLATFORM_K8S_JUJU),
                                                        [$class: 'LabelParameterValue', name: 'SLAVE', label: "${SLAVE}"]
                                                    ]
                                                env.JOB_NUMBER_DEPLOY_TF_K8S_JUJU = "$job.buildVariables.BUILD_NUMBER"
                                                parallel(
                                                    "Test sanity k8s for juju": {
                                                        build job: 'test-sanity',
                                                            parameters: [
                                                                string(name: 'DEPLOY_TF_PROJECT', value: 'deploy-tf-k8s_juju'),
                                                                string(name: 'DEPLOY_TF_JOB_NUMBER', value: env.JOB_NUMBER_DEPLOY_TF_K8S_JUJU),
                                                                [$class: 'LabelParameterValue', name: 'SLAVE', label: "${SLAVE}"]
                                                            ]
                                                    },
                                                    "Test smoke k8s for manifests": {
                                                        build job: 'test-smoke',
                                                            parameters: [
                                                                string(name: 'DEPLOY_TF_PROJECT', value: 'deploy-tf-k8s_juju'),
                                                                string(name: 'DEPLOY_TF_JOB_NUMBER', value: env.JOB_NUMBER_DEPLOY_TF_K8S_JUJU),
                                                                [$class: 'LabelParameterValue', name: 'SLAVE', label: "${SLAVE}"]
                                                            ]
                                                    }
                                                )
                                            }
                                        },
                                        "Deploy-test openstack for helm": {
                                            if (env.JOB_NUMBER_DEPLOY_PLATFORM_OS_HELM) {
                                                job = build job: 'deploy-tf-os_helm',
                                                    parameters: [
                                                        string(name: 'DEPLOY_PLATFORM_JOB_NUMBER', value: env.JOB_NUMBER_DEPLOY_PLATFORM_OS_HELM),
                                                        [$class: 'LabelParameterValue', name: 'SLAVE', label: "${SLAVE}"]
                                                    ]
                                                env.JOB_NUMBER_DEPLOY_TF_OS_HELM = "$job.buildVariables.BUILD_NUMBER"
                                                parallel(
                                                    "Test sanity openstack for helm": {
                                                        build job: 'test-sanity',
                                                            parameters: [
                                                                string(name: 'DEPLOY_TF_PROJECT', value: 'deploy-tf-os_helm'),
                                                                string(name: 'DEPLOY_TF_JOB_NUMBER', value: env.JOB_NUMBER_DEPLOY_TF_OS_HELM),
                                                                [$class: 'LabelParameterValue', name: 'SLAVE', label: "${SLAVE}"]
                                                            ]
                                                    },
                                                    "Test smoke openstack for helm": {
                                                        build job: 'test-smoke',
                                                            parameters: [
                                                                string(name: 'DEPLOY_TF_PROJECT', value: 'deploy-tf-os_helm'),
                                                                string(name: 'DEPLOY_TF_JOB_NUMBER', value: env.JOB_NUMBER_DEPLOY_TF_OS_HELM),
                                                                [$class: 'LabelParameterValue', name: 'SLAVE', label: "${SLAVE}"]
                                                            ]
                                                    }
                                                )
                                            }
                                        }
                                    )
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            sh "env|sort"
            sh "echo ${env.JOB_NUMBER_DEPLOY_PLATFORM_K8S_HELM}"
            sh "echo ${env.JOB_NUMBER_DEPLOY_PLATFORM_K8S_MANIFESTS}"
            sh "echo ${env.JOB_NUMBER_DEPLOY_PLATFORM_K8S_JUJU}"
            sh "echo ${env.JOB_NUMBER_DEPLOY_PLATFORM_OS_HELM}"
            sh "echo 'Destroy VMs'"
            withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',
                                credentialsId: 'aws-creds',
                                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                sh "$WORKSPACE/src/progmaticlab/tf-jenkins/infra/aws/remove_workers.sh"
                }

        }
        failure {
            sh "echo 'archiveArtifacts'"
            sh "echo 'gerrit vote'"
        }
        success {
            sh "echo 'gerrit vote'"
            sh "echo publishArtifact"
        }
        cleanup {
            sh "echo 'remove trash'"
            //deleteDir()
        }
    }
}
