- name: Install required packages
  apt:
    name: "{{ required_pkgs }}"
    state: present
    update_cache: yes

- name: Add Docker GPG apt Key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add Docker Repository
  apt_repository:
    repo: deb https://download.docker.com/linux/ubuntu bionic stable
    state: present

- name: Make /etc/docker directory
  file:
    path: /etc/docker
    owner: root
    group: root
    state: directory

- name: Copy daemon.json template
  template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    owner: root
    group: root

- name: Update apt and install docker-ce
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: latest

- name: Install pip packages
  pip:
    name:
      - docker
      - requests
    executable: "/usr/bin/pip3"

- name: Create temporary build directory
  tempfile:
    state: directory
    suffix: docker-build
  register: docker_build_dir
  when: jenkins_custom_docker_image

- name: Copy jenkins Dockerfile
  template:
    src: "jenkins-Dockerfile.j2"
    dest: "{{ docker_build_dir.path }}/Dockerfile"
  when: jenkins_custom_docker_image

- name: Copy plug-in list to build directory
  template:
    src: "plugins.txt.j2"
    dest: "{{ docker_build_dir.path }}/plugins.txt"
  when: jenkins_custom_docker_image

- name: Copy JCasC config to build directory
  template:
    src: "jenkins-JCasC.yaml.j2"
    dest: "{{ docker_build_dir.path }}/jenkins.yaml"
  when: jenkins_custom_docker_image and jenkins_deploy_configuration

- name: Build jenkins image
  docker_image:
    build:
      path: "{{ docker_build_dir.path }}"
      pull: yes
    name: jenkins-master
    source: build
    tag: latest
    force_tag: yes
    force_source: yes
  when: jenkins_custom_docker_image
  register: jenkins_image

- name: Create nginx-proxy container
  docker_container:
    name: nginx-proxy
    image: jwilder/nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - conf:/etc/nginx/conf.d
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - dhparam:/etc/nginx/dhparam
      - certs:/etc/nginx/certs:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro
    network_mode: bridge

- name: Create letsencrypt container
  docker_container:
    name: letsencrypt
    image: jrcs/letsencrypt-nginx-proxy-companion
    env:
      NGINX_PROXY_CONTAINER: nginx-proxy
    volumes:
      - vhost:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - certs:/etc/nginx/certs:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
    network_mode: bridge

- name: Create jenkins container
  docker_container:
    name: nginx-master
    image: "{{ (jenkins_image.image.RepoTags | join('\n')) | default('jenkins/jenkins:lts') }}"
    ports:
      - "8080:8080"
    env:
      VIRTUAL_HOST: "{{ jenkins_fqdn }}"
      VIRTUAL_PORT: "8080"
      LETSENCRYPT_HOST: "{{ jenkins_fqdn }}"
      LETSENCRYPT_EMAIL: "{{ jenkins_admin_email }}"
    volumes:
      - jenkins_home:/var/jenkins_home
    network_mode: bridge

- name: Get infos on volume
  docker_volume_info:
    name: jenkins_home
  register: volume_jenkins

- name: Clean JCasC config file after jenkins deploy
  file:
    state: absent
    path: "{{ volume_jenkins.volume.Mountpoint }}/jenkins.yaml"
